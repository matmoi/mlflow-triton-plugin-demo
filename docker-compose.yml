services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 1s
      timeout: 1s
      retries: 10

  minio:
    image: minio/minio
    ports:
      - ${MINIO_PORT}:9000
      - ${MINIO_PORT_WEBUI}:9001
    volumes:
      - ./volumes/minio:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"

  minio-create-bucket-artifacts-if-not-exists:
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_ENDPOINT_URL: http://minio:${MINIO_PORT}
    command: s3api create-bucket --bucket ${MLFLOW_BUCKET_ARTIFACTS}
    depends_on:
      minio:
        condition: service_started

  minio-create-bucket-models-if-not-exists:
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_ENDPOINT_URL: http://minio:${MINIO_PORT}
    command: s3api create-bucket --bucket ${TRITON_BUCKET_MODELS}
    depends_on:
      minio:
        condition: service_started

  mlflow:
    image: nvcr.io/nvidia/morpheus/mlflow-triton-plugin:2.12.1
    ports:
      - ${MLFLOW_PORT}:8080
    environment:
      MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING: true
      AWS_ENDPOINT_URL: http://minio:${MINIO_PORT}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    command: mlflow ui --host 0.0.0.0 --port 8080 --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB} --artifacts-destination s3://${MLFLOW_BUCKET_ARTIFACTS}
    depends_on:
      postgres:
        condition: service_healthy
      triton:
        condition: service_started

  triton:
    image: nvcr.io/nvidia/tritonserver:24.04-py3
    ports:
      - ${TRITON_PORT_HTTP}:8000
      - ${TRITON_PORT_GRPC}:8001
      - ${TRITON_PORT_PROMETHEUS}:8002
    command: tritonserver --model-repository=s3://minio:${MINIO_PORT}/${TRITON_BUCKET_MODELS} --strict-model-config=false --model-control-mode=explicit --load-model=*
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}


  prometheus:
    image: prom/prometheus
    ports:
      - ${PROMETHEUS_PORT_WEBUI}:9090
    depends_on:
      triton:
        condition: service_started
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-enterprise
    ports:
      - ${GRAFANA_PORT_WEBUI}:3000
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_started
    
      
volumes:
  postgres: